/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/djmorvay/Documents/Code/PX4-Autopilot/src/drivers/uavcan/libdronecan/dsdl/uavcan/equipment/esc/1036.StatusExtended.uavcan
 */

#ifndef UAVCAN_EQUIPMENT_ESC_STATUSEXTENDED_HPP_INCLUDED
#define UAVCAN_EQUIPMENT_ESC_STATUSEXTENDED_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# Extended Generic ESC status.
# Additional fields on top of the generic ESC status message.
# Transmitted at a lower rate.
#

uint7 input_pct               # Input command to ESC, in percent, which is commanded using the setpoint messages. Range 0% to 100%.
uint7 output_pct              # Output command from ESC to motor, in percent. Range 0% to 100%.

int9 motor_temperature_degC   # Temperature of connected motor, in Celsius. Range is -256 to +255 C.
uint9 motor_angle             # Measured angle of connected angle sensor, in degrees. Range is 0 to 360.

uint19 status_flags           # Manufacturer-specific status flags currently active.

uint5 esc_index               # Index of currently reporting ESC.
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.equipment.esc.StatusExtended
saturated uint7 input_pct
saturated uint7 output_pct
saturated int9 motor_temperature_degC
saturated uint9 motor_angle
saturated uint19 status_flags
saturated uint5 esc_index
******************************************************************************/

#undef input_pct
#undef output_pct
#undef motor_temperature_degC
#undef motor_angle
#undef status_flags
#undef esc_index

namespace uavcan
{
namespace equipment
{
namespace esc
{

template <int _tmpl>
struct UAVCAN_EXPORT StatusExtended_
{
    typedef const StatusExtended_<_tmpl>& ParameterType;
    typedef StatusExtended_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::IntegerSpec< 7, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > input_pct;
        typedef ::uavcan::IntegerSpec< 7, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > output_pct;
        typedef ::uavcan::IntegerSpec< 9, ::uavcan::SignednessSigned, ::uavcan::CastModeSaturate > motor_temperature_degC;
        typedef ::uavcan::IntegerSpec< 9, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > motor_angle;
        typedef ::uavcan::IntegerSpec< 19, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > status_flags;
        typedef ::uavcan::IntegerSpec< 5, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > esc_index;
    };

    enum
    {
        MinBitLen
            = FieldTypes::input_pct::MinBitLen
            + FieldTypes::output_pct::MinBitLen
            + FieldTypes::motor_temperature_degC::MinBitLen
            + FieldTypes::motor_angle::MinBitLen
            + FieldTypes::status_flags::MinBitLen
            + FieldTypes::esc_index::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::input_pct::MaxBitLen
            + FieldTypes::output_pct::MaxBitLen
            + FieldTypes::motor_temperature_degC::MaxBitLen
            + FieldTypes::motor_angle::MaxBitLen
            + FieldTypes::status_flags::MaxBitLen
            + FieldTypes::esc_index::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::input_pct >::Type input_pct;
    typename ::uavcan::StorageType< typename FieldTypes::output_pct >::Type output_pct;
    typename ::uavcan::StorageType< typename FieldTypes::motor_temperature_degC >::Type motor_temperature_degC;
    typename ::uavcan::StorageType< typename FieldTypes::motor_angle >::Type motor_angle;
    typename ::uavcan::StorageType< typename FieldTypes::status_flags >::Type status_flags;
    typename ::uavcan::StorageType< typename FieldTypes::esc_index >::Type esc_index;

    StatusExtended_()
        : input_pct()
        , output_pct()
        , motor_temperature_degC()
        , motor_angle()
        , status_flags()
        , esc_index()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<56 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 1036 };

    static const char* getDataTypeFullName()
    {
        return "uavcan.equipment.esc.StatusExtended";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool StatusExtended_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        input_pct == rhs.input_pct &&
        output_pct == rhs.output_pct &&
        motor_temperature_degC == rhs.motor_temperature_degC &&
        motor_angle == rhs.motor_angle &&
        status_flags == rhs.status_flags &&
        esc_index == rhs.esc_index;
}

template <int _tmpl>
bool StatusExtended_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(input_pct, rhs.input_pct) &&
        ::uavcan::areClose(output_pct, rhs.output_pct) &&
        ::uavcan::areClose(motor_temperature_degC, rhs.motor_temperature_degC) &&
        ::uavcan::areClose(motor_angle, rhs.motor_angle) &&
        ::uavcan::areClose(status_flags, rhs.status_flags) &&
        ::uavcan::areClose(esc_index, rhs.esc_index);
}

template <int _tmpl>
int StatusExtended_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::input_pct::encode(self.input_pct, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::output_pct::encode(self.output_pct, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::motor_temperature_degC::encode(self.motor_temperature_degC, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::motor_angle::encode(self.motor_angle, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::status_flags::encode(self.status_flags, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::esc_index::encode(self.esc_index, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int StatusExtended_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::input_pct::decode(self.input_pct, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::output_pct::decode(self.output_pct, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::motor_temperature_degC::decode(self.motor_temperature_degC, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::motor_angle::decode(self.motor_angle, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::status_flags::decode(self.status_flags, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::esc_index::decode(self.esc_index, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature StatusExtended_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x2DC203C50960EDCULL);

    FieldTypes::input_pct::extendDataTypeSignature(signature);
    FieldTypes::output_pct::extendDataTypeSignature(signature);
    FieldTypes::motor_temperature_degC::extendDataTypeSignature(signature);
    FieldTypes::motor_angle::extendDataTypeSignature(signature);
    FieldTypes::status_flags::extendDataTypeSignature(signature);
    FieldTypes::esc_index::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef StatusExtended_<0> StatusExtended;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::equipment::esc::StatusExtended > _uavcan_gdtr_registrator_StatusExtended;

}

} // Namespace esc
} // Namespace equipment
} // Namespace uavcan

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::uavcan::equipment::esc::StatusExtended >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::uavcan::equipment::esc::StatusExtended::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::uavcan::equipment::esc::StatusExtended >::stream(Stream& s, ::uavcan::equipment::esc::StatusExtended::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "input_pct: ";
    YamlStreamer< ::uavcan::equipment::esc::StatusExtended::FieldTypes::input_pct >::stream(s, obj.input_pct, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "output_pct: ";
    YamlStreamer< ::uavcan::equipment::esc::StatusExtended::FieldTypes::output_pct >::stream(s, obj.output_pct, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "motor_temperature_degC: ";
    YamlStreamer< ::uavcan::equipment::esc::StatusExtended::FieldTypes::motor_temperature_degC >::stream(s, obj.motor_temperature_degC, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "motor_angle: ";
    YamlStreamer< ::uavcan::equipment::esc::StatusExtended::FieldTypes::motor_angle >::stream(s, obj.motor_angle, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "status_flags: ";
    YamlStreamer< ::uavcan::equipment::esc::StatusExtended::FieldTypes::status_flags >::stream(s, obj.status_flags, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "esc_index: ";
    YamlStreamer< ::uavcan::equipment::esc::StatusExtended::FieldTypes::esc_index >::stream(s, obj.esc_index, level + 1);
}

}

namespace uavcan
{
namespace equipment
{
namespace esc
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::uavcan::equipment::esc::StatusExtended::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::uavcan::equipment::esc::StatusExtended >::stream(s, obj, 0);
    return s;
}

} // Namespace esc
} // Namespace equipment
} // Namespace uavcan

#endif // UAVCAN_EQUIPMENT_ESC_STATUSEXTENDED_HPP_INCLUDED