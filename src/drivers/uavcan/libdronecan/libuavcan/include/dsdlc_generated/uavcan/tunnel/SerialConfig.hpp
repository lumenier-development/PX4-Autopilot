/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/djmorvay/Documents/Code/PX4-Autopilot/src/drivers/uavcan/libdronecan/dsdl/uavcan/tunnel/2011.SerialConfig.uavcan
 */

#ifndef UAVCAN_TUNNEL_SERIALCONFIG_HPP_INCLUDED
#define UAVCAN_TUNNEL_SERIALCONFIG_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# This message carries baudrate for tunnel channel_id

# The channelID allows for additional routing between the source and target nodes.
uint8 channel_id

uint32 baud

uint24 options
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.tunnel.SerialConfig
saturated uint8 channel_id
saturated uint32 baud
saturated uint24 options
******************************************************************************/

#undef channel_id
#undef baud
#undef options

namespace uavcan
{
namespace tunnel
{

template <int _tmpl>
struct UAVCAN_EXPORT SerialConfig_
{
    typedef const SerialConfig_<_tmpl>& ParameterType;
    typedef SerialConfig_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > channel_id;
        typedef ::uavcan::IntegerSpec< 32, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > baud;
        typedef ::uavcan::IntegerSpec< 24, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > options;
    };

    enum
    {
        MinBitLen
            = FieldTypes::channel_id::MinBitLen
            + FieldTypes::baud::MinBitLen
            + FieldTypes::options::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::channel_id::MaxBitLen
            + FieldTypes::baud::MaxBitLen
            + FieldTypes::options::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::channel_id >::Type channel_id;
    typename ::uavcan::StorageType< typename FieldTypes::baud >::Type baud;
    typename ::uavcan::StorageType< typename FieldTypes::options >::Type options;

    SerialConfig_()
        : channel_id()
        , baud()
        , options()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<64 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 2011 };

    static const char* getDataTypeFullName()
    {
        return "uavcan.tunnel.SerialConfig";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool SerialConfig_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        channel_id == rhs.channel_id &&
        baud == rhs.baud &&
        options == rhs.options;
}

template <int _tmpl>
bool SerialConfig_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(channel_id, rhs.channel_id) &&
        ::uavcan::areClose(baud, rhs.baud) &&
        ::uavcan::areClose(options, rhs.options);
}

template <int _tmpl>
int SerialConfig_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::channel_id::encode(self.channel_id, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::baud::encode(self.baud, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::options::encode(self.options, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int SerialConfig_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::channel_id::decode(self.channel_id, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::baud::decode(self.baud, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::options::decode(self.options, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature SerialConfig_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x4237AACEE87E82ADULL);

    FieldTypes::channel_id::extendDataTypeSignature(signature);
    FieldTypes::baud::extendDataTypeSignature(signature);
    FieldTypes::options::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef SerialConfig_<0> SerialConfig;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::tunnel::SerialConfig > _uavcan_gdtr_registrator_SerialConfig;

}

} // Namespace tunnel
} // Namespace uavcan

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::uavcan::tunnel::SerialConfig >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::uavcan::tunnel::SerialConfig::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::uavcan::tunnel::SerialConfig >::stream(Stream& s, ::uavcan::tunnel::SerialConfig::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "channel_id: ";
    YamlStreamer< ::uavcan::tunnel::SerialConfig::FieldTypes::channel_id >::stream(s, obj.channel_id, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "baud: ";
    YamlStreamer< ::uavcan::tunnel::SerialConfig::FieldTypes::baud >::stream(s, obj.baud, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "options: ";
    YamlStreamer< ::uavcan::tunnel::SerialConfig::FieldTypes::options >::stream(s, obj.options, level + 1);
}

}

namespace uavcan
{
namespace tunnel
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::uavcan::tunnel::SerialConfig::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::uavcan::tunnel::SerialConfig >::stream(s, obj, 0);
    return s;
}

} // Namespace tunnel
} // Namespace uavcan

#endif // UAVCAN_TUNNEL_SERIALCONFIG_HPP_INCLUDED