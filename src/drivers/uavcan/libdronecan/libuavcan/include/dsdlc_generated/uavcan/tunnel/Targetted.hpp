/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/djmorvay/Documents/Code/PX4-Autopilot/src/drivers/uavcan/libdronecan/dsdl/uavcan/tunnel/3001.Targetted.uavcan
 */

#ifndef UAVCAN_TUNNEL_TARGETTED_HPP_INCLUDED
#define UAVCAN_TUNNEL_TARGETTED_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

#include <uavcan/tunnel/Protocol.hpp>

/******************************* Source text **********************************
# This message struct carries arbitrary data in the format of the specified high-level protocol.
# The message is sent as a broadcast but it is expected that the target_node to select which node
# will process the data. This is used instead of a service request to avoid the round trip which
# impacts high rate messages
# a send with a buffer length of 0 can be used as a keepalive or to trigger initial
# setup of the link on the target node

Protocol protocol

# target CAN node ID
uint7 target_node

# ID of serial device, -1 means the default device
int5 serial_id

# option flags
uint4 OPTION_LOCK_PORT = 1

uint4 options

uint24 baudrate

uint8[<=120] buffer
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.tunnel.Targetted
uavcan.tunnel.Protocol protocol
saturated uint7 target_node
saturated int5 serial_id
saturated uint4 options
saturated uint24 baudrate
saturated uint8[<=120] buffer
******************************************************************************/

#undef protocol
#undef target_node
#undef serial_id
#undef options
#undef baudrate
#undef buffer
#undef OPTION_LOCK_PORT

namespace uavcan
{
namespace tunnel
{

template <int _tmpl>
struct UAVCAN_EXPORT Targetted_
{
    typedef const Targetted_<_tmpl>& ParameterType;
    typedef Targetted_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
        typedef ::uavcan::IntegerSpec< 4, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > OPTION_LOCK_PORT;
    };

    struct FieldTypes
    {
        typedef ::uavcan::tunnel::Protocol protocol;
        typedef ::uavcan::IntegerSpec< 7, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > target_node;
        typedef ::uavcan::IntegerSpec< 5, ::uavcan::SignednessSigned, ::uavcan::CastModeSaturate > serial_id;
        typedef ::uavcan::IntegerSpec< 4, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > options;
        typedef ::uavcan::IntegerSpec< 24, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > baudrate;
        typedef ::uavcan::Array< ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeDynamic, 120 > buffer;
    };

    enum
    {
        MinBitLen
            = FieldTypes::protocol::MinBitLen
            + FieldTypes::target_node::MinBitLen
            + FieldTypes::serial_id::MinBitLen
            + FieldTypes::options::MinBitLen
            + FieldTypes::baudrate::MinBitLen
            + FieldTypes::buffer::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::protocol::MaxBitLen
            + FieldTypes::target_node::MaxBitLen
            + FieldTypes::serial_id::MaxBitLen
            + FieldTypes::options::MaxBitLen
            + FieldTypes::baudrate::MaxBitLen
            + FieldTypes::buffer::MaxBitLen
    };

    // Constants
    static const typename ::uavcan::StorageType< typename ConstantTypes::OPTION_LOCK_PORT >::Type OPTION_LOCK_PORT; // 1

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::protocol >::Type protocol;
    typename ::uavcan::StorageType< typename FieldTypes::target_node >::Type target_node;
    typename ::uavcan::StorageType< typename FieldTypes::serial_id >::Type serial_id;
    typename ::uavcan::StorageType< typename FieldTypes::options >::Type options;
    typename ::uavcan::StorageType< typename FieldTypes::baudrate >::Type baudrate;
    typename ::uavcan::StorageType< typename FieldTypes::buffer >::Type buffer;

    Targetted_()
        : protocol()
        , target_node()
        , serial_id()
        , options()
        , baudrate()
        , buffer()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<1015 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 3001 };

    static const char* getDataTypeFullName()
    {
        return "uavcan.tunnel.Targetted";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool Targetted_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        protocol == rhs.protocol &&
        target_node == rhs.target_node &&
        serial_id == rhs.serial_id &&
        options == rhs.options &&
        baudrate == rhs.baudrate &&
        buffer == rhs.buffer;
}

template <int _tmpl>
bool Targetted_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(protocol, rhs.protocol) &&
        ::uavcan::areClose(target_node, rhs.target_node) &&
        ::uavcan::areClose(serial_id, rhs.serial_id) &&
        ::uavcan::areClose(options, rhs.options) &&
        ::uavcan::areClose(baudrate, rhs.baudrate) &&
        ::uavcan::areClose(buffer, rhs.buffer);
}

template <int _tmpl>
int Targetted_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::protocol::encode(self.protocol, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::target_node::encode(self.target_node, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::serial_id::encode(self.serial_id, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::options::encode(self.options, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::baudrate::encode(self.baudrate, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::buffer::encode(self.buffer, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int Targetted_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::protocol::decode(self.protocol, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::target_node::decode(self.target_node, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::serial_id::decode(self.serial_id, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::options::decode(self.options, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::baudrate::decode(self.baudrate, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::buffer::decode(self.buffer, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature Targetted_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x230BC3EF30D5E369ULL);

    FieldTypes::protocol::extendDataTypeSignature(signature);
    FieldTypes::target_node::extendDataTypeSignature(signature);
    FieldTypes::serial_id::extendDataTypeSignature(signature);
    FieldTypes::options::extendDataTypeSignature(signature);
    FieldTypes::baudrate::extendDataTypeSignature(signature);
    FieldTypes::buffer::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

template <int _tmpl>
const typename ::uavcan::StorageType< typename Targetted_<_tmpl>::ConstantTypes::OPTION_LOCK_PORT >::Type
    Targetted_<_tmpl>::OPTION_LOCK_PORT = 1U; // 1

/*
 * Final typedef
 */
typedef Targetted_<0> Targetted;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::tunnel::Targetted > _uavcan_gdtr_registrator_Targetted;

}

} // Namespace tunnel
} // Namespace uavcan

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::uavcan::tunnel::Targetted >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::uavcan::tunnel::Targetted::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::uavcan::tunnel::Targetted >::stream(Stream& s, ::uavcan::tunnel::Targetted::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "protocol: ";
    YamlStreamer< ::uavcan::tunnel::Targetted::FieldTypes::protocol >::stream(s, obj.protocol, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "target_node: ";
    YamlStreamer< ::uavcan::tunnel::Targetted::FieldTypes::target_node >::stream(s, obj.target_node, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "serial_id: ";
    YamlStreamer< ::uavcan::tunnel::Targetted::FieldTypes::serial_id >::stream(s, obj.serial_id, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "options: ";
    YamlStreamer< ::uavcan::tunnel::Targetted::FieldTypes::options >::stream(s, obj.options, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "baudrate: ";
    YamlStreamer< ::uavcan::tunnel::Targetted::FieldTypes::baudrate >::stream(s, obj.baudrate, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "buffer: ";
    YamlStreamer< ::uavcan::tunnel::Targetted::FieldTypes::buffer >::stream(s, obj.buffer, level + 1);
}

}

namespace uavcan
{
namespace tunnel
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::uavcan::tunnel::Targetted::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::uavcan::tunnel::Targetted >::stream(s, obj, 0);
    return s;
}

} // Namespace tunnel
} // Namespace uavcan

#endif // UAVCAN_TUNNEL_TARGETTED_HPP_INCLUDED